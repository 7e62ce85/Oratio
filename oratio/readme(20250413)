# Lemmy with Bitcoin Cash Payment Integration

(The system is fully implemented with Bitcoin Cash payments integrated into the Lemmy community platform. Electron Cash wallet functionality is operational with both direct and indirect payment modes available.)

This project implements a **Lemmy** community platform with **Bitcoin Cash (BCH) Payment Integration** using Electron Cash wallet. Running in Docker containers, the system provides a complete solution for accepting BCH payments within a Lemmy forum installation, with **Nginx** configured as a reverse proxy with SSL (Let's Encrypt).

## Table of Contents

- [Project Overview](#project-overview)
- [System Architecture](#system-architecture)
- [Features](#features)
- [Installation and Configuration](#installation-and-configuration)
  - [1. Prerequisites](#1-prerequisites)
  - [2. Setup Instructions](#2-setup-instructions)
  - [3. Configuration Options](#3-configuration-options)
- [Components](#components)
  - [1. Lemmy Core](#1-lemmy-core)
  - [2. Bitcoin Cash Payment Service](#2-bitcoin-cash-payment-service)
  - [3. Electron Cash Integration](#3-electron-cash-integration)
  - [4. Nginx Configuration](#4-nginx-configuration)
- [Database Structure](#database-structure)
- [API Endpoints](#api-endpoints)
- [Payment Processing Flow](#payment-processing-flow)
- [Backup and Maintenance](#backup-and-maintenance)
- [Security Considerations](#security-considerations)
- [Troubleshooting](#troubleshooting)
- [Technical Notes](#technical-notes)
- [Future Improvements](#future-improvements)

---

## Project Overview

This project integrates Bitcoin Cash payments with the Lemmy community platform, providing:

- **Payment Processing**: Complete BCH payment processing using Electron Cash
- **User Credit Management**: System for tracking user payments and credits
- **Invoice Generation**: Dynamic invoice creation with QR codes
- **Payment Verification**: Automated transaction monitoring and verification
- **Multiple Payment Modes**: Both direct payments and address-specific payments
- **Mock Mode**: Testing environment without actual BCH transactions

The implementation uses Flask (Python) for the payment service and integrates with the Rust-based Lemmy platform.

---

## System Architecture

The system consists of several interconnected components:

1. **Lemmy** - Core community platform built in Rust
2. **Bitcoin Cash Payment Service** - Flask application for payment processing
3. **Electron Cash Integration** - BCH wallet management and verification
4. **Nginx** - Reverse proxy for the various services

The components communicate through Docker networking, with the payment service calling the Lemmy API when credits need to be applied.

---

## Features

- **BCH Payment Processing**: Full invoice generation and payment verification
- **QR Code Generation**: For easy mobile payments
- **Transaction Monitoring**: Automatic checking for payment confirmations
- **User Credit System**: Tracking of user credits and transactions
- **Proof of Work Verification**: Optional PoW for payment verification
- **Mock Mode**: Test functionality without actual BCH transactions
- **Direct Payment Mode**: Simplified payment handling with centralized wallet
- **Multiple Confirmation Levels**: Configurable confirmation requirements
- **Fault Tolerance**: Handling of network and database connection issues

---

## Installation and Configuration

### 1. Prerequisites

- Docker and Docker Compose
- Domain name with DNS configured
- SSL certificates (Let's Encrypt)
- 1GB+ RAM server (DigitalOcean Droplet or similar)
- Basic knowledge of Bitcoin Cash and Electron Cash

### 2. Setup Instructions

1. **Clone the repository and configure environment variables**:
   - Configure payment wallet address
   - Set up API keys and credentials

2. **Start the services**:
   ```bash
   docker-compose up -d
   ```

3. **Initialize the Electron Cash wallet**:
   - The system will automatically set up the wallet and generate payment addresses

### 3. Configuration Options

The system supports various configuration options through environment variables in the Docker Compose file:

- `MOCK_MODE`: Enable/disable mock payment processing (true/false)
- `TESTNET`: Use BCH testnet instead of mainnet (true/false)
- `DIRECT_MODE`: Enable direct payment handling mode (true/false)
- `MIN_CONFIRMATIONS`: Minimum confirmations required to mark a payment as completed
- `PAYOUT_WALLET`: The BCH address for centralized payments
- `ELECTRON_CASH_URL`: URL for Electron Cash RPC service
- `LEMMY_API_URL`: URL for Lemmy API
- `FORWARD_PAYMENTS`: Enable automatic forwarding of received funds to payout wallet

---

## Components

### 1. Lemmy Core

- Standard Lemmy installation using Docker containers
- Community platform with posts, comments, and user interactions
- Version 0.19.8 of Lemmy and Lemmy-UI
- PostgreSQL database for storing forum data
- Pictrs service for image handling

### 2. Bitcoin Cash Payment Service

- Flask-based API service for handling BCH payments
- Features:
  - Invoice generation and management
  - Payment verification and transaction monitoring
  - User credit management
  - QR code generation for mobile payments
  - Integration with Lemmy API for user credit application
- Database: SQLite with WAL journaling mode
- Located in `/srv/lemmy/defadb.com/bitcoincash_service`

### 3. Electron Cash Integration

- Serves as the Bitcoin Cash wallet backend
- Manages:
  - Address generation
  - Balance checking
  - Transaction verification
  - Payment forwarding
- RPC interface for the payment service
- Wallet data stored in `/srv/lemmy/defadb.com/data/electron_cash`

### 4. Nginx Configuration

- Reverse proxy for both Lemmy and the payment service
- SSL termination with Let's Encrypt certificates
- Configuration for handling both HTTP and HTTPS traffic
- Located in `/srv/lemmy/defadb.com/nginx`

---

## Database Structure

The payment service uses SQLite with the following tables:

- **invoices**: Stores payment invoices and their statuses
  - Fields: id, payment_address, amount, status, created_at, expires_at, paid_at, user_id, tx_hash, confirmations

- **addresses**: Tracks BCH addresses generated for payments
  - Fields: address, created_at, used

- **user_credits**: Manages user credit balances
  - Fields: user_id, credit_balance, last_updated

- **transactions**: Records all transaction history
  - Fields: id, user_id, amount, type, description, created_at, invoice_id

- **pow_verifications**: Stores proof-of-work verification data
  - Fields: id, invoice_id, nonce, hash, verified, verified_at, user_token

- **pow_credits**: Manages proof-of-work based credits
  - Fields: id, invoice_id, user_id, amount, created_at, used

---

## API Endpoints

### Payment Service API

- **/generate_invoice**: Create a new payment invoice
  - Parameters: amount, user_id
  - Returns: Invoice details with payment address

- **/invoice/<invoice_id>**: View invoice details
  - Shows QR code and payment status

- **/check_payment/<invoice_id>**: Check payment status
  - Returns current status of the invoice: pending, paid, completed, expired

- **/verify-payment**: Verify payment with proof of work
  - Parameters: paymentId, userToken, nonce, hash
  - Returns: Verification status

- **/api/user_credit/<user_id>**: Get user credit balance
  - Requires API key authentication

- **/api/transactions/<user_id>**: Get user transaction history
  - Requires API key authentication

- **/health**: Service health check endpoint

---

## Payment Processing Flow

1. **Invoice Creation**:
   - User requests an invoice with an amount
   - System generates a unique BCH address (or uses direct payment address)
   - QR code is generated for easy mobile payment

2. **Payment Monitoring**:
   - Background service checks for incoming payments
   - For each pending invoice, the system checks the address balance
   - When a payment is detected, the transaction is verified

3. **Confirmation Process**:
   - System monitors confirmations for each transaction
   - When minimum confirmations are reached, payment is marked as complete
   - User credits are added to their account

4. **Credit Application**:
   - User credits are applied within the Lemmy system
   - Transaction records are maintained for auditing

5. **Optional Forwarding**:
   - If enabled, received funds are automatically forwarded to a central wallet
   - Helps with wallet management and security

---

## Backup and Maintenance

### Wallet Backup

The system includes a wallet backup script (`wallet_backup.sh`) that should be run regularly to back up the Electron Cash wallet data. Key files to back up include:

- `/srv/lemmy/defadb.com/data/electron_cash/wallets`
- `/srv/lemmy/defadb.com/data/electron_cash/seed.txt`
- `/srv/lemmy/defadb.com/data/bitcoincash/payments.db`

### Transaction Monitoring

A background process continuously monitors transactions and updates payment statuses automatically. This runs within the Bitcoin Cash Payment Service container.

### Database Maintenance

The SQLite database uses WAL journaling mode for better performance and reliability. Regular checkpoints occur automatically, but manual vacuuming may be needed occasionally for optimal performance.

---

## Security Considerations

- **Wallet Security**: The Electron Cash wallet requires secure credential management
- **API Authentication**: API keys protect sensitive endpoints
- **Transaction Forwarding**: The system can automatically move funds to a designated payout wallet
- **SSL/TLS**: All connections are secured with SSL/TLS through Nginx
- **Database Security**: The SQLite database uses proper locking and foreign key constraints
- **Error Handling**: Comprehensive error handling prevents information leakage
- **Network Isolation**: Docker networking isolates services appropriately

---

## Troubleshooting

### Common Issues

- **Connection Problems**: If the Electron Cash RPC service is unreachable, check network settings and credentials
- **Database Locking**: During high concurrency, the SQLite database may experience locking issues
- **Transaction Confirmations**: BCH network congestion can delay transaction confirmations
- **Address Generation Failures**: If new addresses can't be generated, check Electron Cash wallet status

### Logs

- Main logs are available in the `logs` directory
- Electron Cash logs are in `electron-cash-logs.txt`
- Bitcoin Cash service logs are in `bitcoincash_service/bch_payment.log`

### Diagnostic Commands

For debugging, you can use these commands:

```bash
# Check Bitcoin Cash service logs
docker-compose logs bitcoincash-service

# Test Electron Cash RPC connection
docker-compose exec bitcoincash-service python3 test_api_connection.py

# Manually check for payments
docker-compose exec bitcoincash-service python3 manual_tx_check.py
```

---

## Technical Notes

- The system is designed to handle network interruptions gracefully
- The direct payment handler provides fallback capabilities when Electron Cash is unavailable
- Database operations use proper locking and timeout handling
- External APIs are used as fallbacks for transaction verification
- The system includes handling for database locks and connection retries
- Transaction monitoring occurs in a background thread to avoid blocking the main application

---

## Future Improvements

Potential enhancements to consider:

- **Multi-wallet Support**: Implement multiple wallets for better scaling
- **Enhanced Analytics**: Add detailed reporting on payment patterns
- **Additional Cryptocurrencies**: Extend beyond BCH to other coins
- **Advanced Verification**: Implement additional payment verification methods
- **User Interface Improvements**: Create a more comprehensive admin dashboard
- **Performance Optimization**: Further optimize database operations for higher throughput

---

This system provides a complete solution for integrating Bitcoin Cash payments into a Lemmy community platform, with robust payment processing, verification, and user credit management.